<launch>
  <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames -->

  <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
  <machine name="androbotics" address="192.168.1.144" password="spbot" env-loader="/home/androbotics/spbot_ws/devel/env.sh" user="androbotics"/>
  <rosparam file="$(find navstack_pub)/config/mr_robot_firmware.yaml" command="load" />

  <param name="robot_description" command="$(find xacro)/xacro '$(find spbotv2_description)/urdf/spbotv2.xacro'" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node name="diff_drive" pkg="navstack_pub" type="twist_to_pwm.py" output="screen"/>

  <include file="$(find mr_robot_nav)/launch/navigation.launch" />

  <!-- Wheel Encoder Tick Publisher and Base Controller Using Arduino --> 
  <!-- motor_controller_diff_drive_2.ino is the Arduino sketch -->
  <!-- Subscribe: /cmd_vel -->
  <!-- Publish: /right_ticks, /left_ticks -->
  <node machine="androbotics" pkg="rosserial_arduino" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyUSB_ARDUINO"/>
    <param name="baud" value="57600"/>
  </node>

<node type="rviz" name="rviz" pkg="rviz" args="-d $(find navstack_pub)/config/rviz.rviz" />

 
  <!-- Wheel Odometry Publisher -->
  <!-- Subscribe: /right_ticks, /left_ticks, /initial_2d -->
  <!-- Publish: /odom_data_euler, /odom_data_quat -->
  <node pkg="navstack_pub" type="esp_diff_tf.py" name="odom_pub"/>
    
  <!-- Extended Kalman Filter from robot_pose_ekf Node-->
  <!-- Subscribe: /odom, /imu_data, /vo -->
  <!-- Publish: /robot_pose_ekf/odom_combined -->
  <!-- <remap from="odom" to="odom_data_quat" /> -->
  <!-- <remap from="imu_data" to="imu/data" /> -->
  <!-- <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf" >
    <param name="output_frame" value="odom"/>
    <param name="base_footprint_frame" value="base_link"/>
    <param name="freq" value="30.0"/>
    <param name="sensor_timeout" value="1.0"/>
    <param name="odom_used" value="true"/>
    <param name="imu_used" value="false"/>
    <param name="vo_used" value="false"/>
    <param name="gps_used" value="false"/>
    <param name="debug" value="false"/>
    <param name="self_diagnose" value="false"/>
  </node> -->
  
  <node pkg="navstack_pub" type="rviz_click_to_2d" name="rviz_click_to_2d"/>
  
   <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
  <!-- Used for obstacle avoidance and can be used for mapping --> 
  <!-- Publish: /scan -->
    <node machine="androbotics" name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyUSB_LIDAR"/>
    <param name="serial_baudrate"     type="int"    value="115200"/><!--A1/A2 -->
    <param name="frame_id"            type="string" value="laser_link_1"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
    
  </node>  
 
</launch>
